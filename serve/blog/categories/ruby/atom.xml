<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Max Alcal치 S치inz]]></title>
  <link href="http://maxarturoas.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://maxarturoas.com/"/>
  <updated>2014-12-02T09:33:18-06:00</updated>
  <id>http://maxarturoas.com/</id>
  <author>
    <name><![CDATA[Max Arturo Alcal치 S치inz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Everyday as a Lifestyle]]></title>
    <link href="http://maxarturoas.com/blog/2014/06/23/programming-everyday/"/>
    <updated>2014-06-23T21:55:23-05:00</updated>
    <id>http://maxarturoas.com/blog/2014/06/23/programming-everyday</id>
    <content type="html"><![CDATA[<p>A while back, I referred a coworker back to my blog to show him some examples of d3.js, and noticed that it remained as abandoned as one&rsquo;s old n64 from college days. Pretty neat and waiting to be played with, but sadly colleting dust.</p>

<p>As anyone with an engaging job and a family can attest, sometimes getting around to your hobbies takes a back seat from other priorities. <!-- more --> Trying to develop your skills in a mentally challenging and detail-oriented hobby that sometimes requires hours on end of uninterrupted focus, however, is a much more difficult sell than, say, knitting (now that I think of it, I can see knitting taking up hours on end of uninterrupted focus&hellip;).</p>

<p>The reason that programming cannot be put into a &ldquo;hobby&rdquo; framework is that it doesn&rsquo;t work like a continuous time investment stream. One can&rsquo;t just do a little programming &ndash; that&rsquo;s what all CS professors wisely advise against. Often times, you can&rsquo;t just attempt to cram whatever knowledge you need to know in order to solve a problem. You can only Google so much before you realize you don&rsquo;t know what to look for, or find a weird implementation example that has nothing to do with your original intent. You need to have access to a couple (or perhaps more) layers of abstraction, readily at your fingertips &ndash; sometimes just to figure out what is wrong! And that additional knowledge comes at the expense of having solved similar subsets of the same problem over the course of time.</p>

<p>And that is just for straightforward, single-purpose programs. Learning entire frameworks and contributing to open-source projects involves a couple more layers of abstraction, namely <em>team collaboration</em> and <em>software architecture</em>. Now that&rsquo;s something that takes time&hellip;</p>

<p>Point being, anyone who seriously intends to become a somewhat proficient programmer, and who does not have the support network of being in a degree program, needs to treat the learning process as a <strong>lifestyle</strong>.</p>

<p>I&rsquo;m particularly invested in improving my programming skills because:</p>

<ul>
<li>It&rsquo;s fun</li>
<li>It helps me with my day job</li>
<li>It helps me bring better tools into what I do</li>
<li>It keeps me sharp mentally</li>
</ul>


<p>Whether I end up fully converting into a development career later on is yet to be seen, but it is a possibility to be certain. However, these reasons are strong enough for me to make any reasonable effort to invest the time and practice programming on a constant basis. How often? Why not daily?</p>

<p>When I first started working out, I was motivated by my coworkers who hit the gym 3x weekly. I remember thinking that it was a heavy rhythm and that I would fizzle out, but lo! I was able to stick it out, and now that they have moved or transferred, the regime sticks. The inertia of regular &ldquo;rituals&rdquo; is strong with the human brain, and I don&rsquo;t see why programming should be any different. I&rsquo;ve read up stories of <a href="http://blog.jenniferdewalt.com/">Jennifer Dewalt</a> and others who just &ldquo;pick it up&rdquo; and go for a lengthened boot camp, though there are also <a href="https://programmers.stackexchange.com/questions/48698/i-dont-program-in-my-spare-time-does-that-make-me-a-bad-developer">very good reasons</a> against overdoing yourself. It seems that the upper bound lies around &lt;=4 hours/day. Regardless of the frequency, having the drive to program constantly is a reflection of your actual pleasure in the craft. As someone on the last link worded more skillfully:</p>

<blockquote><p>Not programming in your spare time does not make you a bad developer, however, programming in your spare time can make you a better developer.</p></blockquote>

<p>And with that said, I&rsquo;m aiming for the lofty goal of programming daily. I will attempt a unitary exercise, probably from the trusty <a href="http://www.reddit.com/r/dailyprogrammer/">/r/dailyprogrammer</a> subreddit and vary it a bit. I&rsquo;ve already started since last week, and its fun! My first aim will be with Ruby. I felt it was neccesary, as I&rsquo;m using all this Jekyll mumbo-jumbo and running Ruby commands in the blind&hellip; Not proper.</p>

<p>You can find my exercises on the right in GitHub to keep me honest, or for your own use! I&rsquo;ve taken painstaking detail into recreating any prompts and useful links in markdown for your viewing pleasure. Let&rsquo;s see where this takes us!</p>
]]></content>
  </entry>
  
</feed>
